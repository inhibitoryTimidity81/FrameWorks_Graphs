
//COPY THE BLACKBOX, there is no need to change anything in it.
//Check the main function at bottom for USAGE

//****************BLACKBOX START*****************
//START COPYING FROM HERE

typedef int ll;

class Hash {
  private:
	map<tuple<int,int,int>,int>hash_table;
  public:
	Hash () {}
	int hash(int x){
		return hash({x,0,0});
	}
	int hash(tuple<int,int>x){
		return hash({get<0>(x),get<1>(x),0});
	}
	int hash(tuple<int,int,int>x){
		if(hash_table.find(x)!=hash_table.end())
			return hash_table[x];
		int new_hash = hash_table.size();
		hash_table[x]=new_hash;
		return new_hash;
	}
};

class Graph {

	bool is_directed;

	public:
		vector<vector<pair<int,ll>>>adj;
    	int n,N=5000000;
    	Hash h;

		Graph(int n_, bool is_directed_ = true){
			n=n_; is_directed = is_directed_;
			adj.resize(N,vector<pair<int,ll>>());
		}

		int hash(int u, int v){
			return h.hash({u,v});
		}
		int hash(int u, int v, int k){
			return h.hash({u,v,k});
		}

		void add_edge(int uR, int vR, ll c=0){
		  int u=h.hash(uR), v=h.hash(vR);
		  add_edge_internal(u,v,c);
		}
		void add_edge(tuple<int,int> uR, tuple<int,int> vR, ll c=0){
		  int u=h.hash(uR), v=h.hash(vR);
		  add_edge_internal(u,v,c);
		}
		void add_edge(tuple<int,int,int> uR, tuple<int,int,int> vR, ll c=0){
		  int u=h.hash(uR), v=h.hash(vR);
		  add_edge_internal(u,v,c);
		}


	private :

	  void add_edge_internal(int u, int v, ll c=0){
			add_edge_weighted_undirected(u,v,c);
			if(!is_directed)
				add_edge_weighted_undirected(v,u,c);
		}
		void add_edge_weighted_undirected(int u, int v, ll c) {
			pair<int,ll>p = make_pair(v,c);
			adj[u].push_back(p);
		}

};

class BFS {
    vector<ll>min_dist_from_source;
    vector<bool> visited;
    Graph *g;

    public:
      BFS(Graph *g_) {
          g = g_;
          clear();
      }

	  	void clear() {
  			min_dist_from_source.clear();
  			min_dist_from_source.resize(g->N,-1);
  			visited.clear();
  			visited.resize(g->N, false);
  		}


      void run(int sourceR) {
        int source = (g->h).hash(sourceR);
        run_internal(source);
      }
      void run(tuple<int,int> sourceR) {
        int source = (g->h).hash(sourceR);
        run_internal(source);
      }
      void run(tuple<int,int,int> sourceR) {
        int source = (g->h).hash(sourceR);
        run_internal(source);
      }


      int min_dist(int targetR){
      	int target = (g->h).hash(targetR);
      	return min_dist_internal(target);
      }
      int min_dist(tuple<int,int> targetR){
      	int target = (g->h).hash(targetR);
      	return min_dist_internal(target);
      }
      int min_dist(tuple<int,int,int> targetR){
      	int target = (g->h).hash(targetR);
      	return min_dist_internal(target);
      }

      bool is_visited(int targetR){
      	int target = (g->h).hash(targetR);
      	return is_visited_internal(target);
      }
      bool is_visited(tuple<int,int> targetR){
      	int target = (g->h).hash(targetR);
      	return is_visited_internal(target);
      }
      bool is_visited(tuple<int,int,int> targetR){
      	int target = (g->h).hash(targetR);
      	return is_visited_internal(target);
      }

  private:
    void run_internal(int source) {
			queue<int> q;
			q.push(source);

			visited[source] = true;
			min_dist_from_source[source] = 0;

			while(!q.empty()) {
				int cur_node = q.front();
				for (unsigned int i = 0; i < (g->adj[cur_node]).size(); ++i) {
					int adj_node =  (g->adj[cur_node])[i].first;
					if (visited[adj_node] == false) {
						visited[adj_node] = true;
						min_dist_from_source[adj_node] = min_dist_from_source[cur_node] + 1;
						q.push(adj_node);
					}
				}
				q.pop();
			}

			return;
    }

    int min_dist_internal(int target){
    	return min_dist_from_source[target];
    }

    bool is_visited_internal(int target){
    	return visited[target];
    }

};
//END COPYING HERE
//********************BLACKBOX END******************








//*******FOR TWO DIMENSIONAL GRAPHS*********
//================== FRAMEWORK START ==================

// A simple integer‐ID graph for an n×m grid (plus optional extra nodes)
struct Graph {
    int N;
    vector<vector<int>> adj;
    Graph(int _N): N(_N), adj(_N) {}
    // add a directed edge u→v
    void add_edge(int u, int v) {
        adj[u].push_back(v);
    }
    // for undirected, call add_edge(u,v) and add_edge(v,u)
};

// Classic BFS on integer‐ID graph, with named accessors
struct BFS {
    vector<int>  min_dist;    // renamed from dist
    vector<bool> visited;     // renamed from vis

    BFS(int N)
      : min_dist(N, -1),
        visited(N, false)
    {}

    // run BFS from source 'src', filling min_dist[] and visited[]
    void run(const Graph &g, int src) {
        queue<int> q;
        q.push(src);
        visited[src]   = true;
        min_dist[src]  = 0;
        while (!q.empty()) {
            int u = q.front(); q.pop();
            for (int v : g.adj[u]) {
                if (!visited[v]) {
                    visited[v]    = true;
                    min_dist[v]   = min_dist[u] + 1;
                    q.push(v);
                }
            }
        }
    }

    bool is_visited(int u) const {
        return visited[u];
    }

    int min_dist_to(int u) const {
        return min_dist[u];
    }
};

// Helper to convert 2D (i,j) into 1D [0..n*m-1]
inline int id(int i, int j, int m) {
    return i * m + j;
}




                                                                                          // ####### To apply dikjstra also #########

typedef int ll;
#include <bits/stdc++.h>
using namespace std;

//==================== Hash ====================//
class Hash {
  private:
    map<tuple<int,int,int>,int> hash_table;
  public:
    Hash () {}
    int hash(int x) {
        return hash({x,0,0});
    }
    int hash(tuple<int,int> t) {
        return hash({get<0>(t), get<1>(t), 0});
    }
    int hash(tuple<int,int,int> t) {
        auto it = hash_table.find(t);
        if (it != hash_table.end())
            return it->second;
        int new_hash = hash_table.size();
        hash_table[t] = new_hash;
        return new_hash;
    }
};

//==================== Graph ====================//
class Graph {
    bool is_directed;
  public:
    vector<vector<pair<int,ll>>> adj;
    int n, N = 5000000;
    Hash h;

    Graph(int n_, bool is_directed_ = true) {
        n = n_;
        is_directed = is_directed_;
        adj.resize(N);
    }

    // convenience overloads for hashing
    int hash(int u, int v) {
        return h.hash({u,v});
    }
    int hash(int u, int v, int k) {
        return h.hash({u,v,k});
    }

    // add an edge (possibly weighted)
    void add_edge(int uR, int vR, ll c = 0) {
        int u = h.hash(uR), v = h.hash(vR);
        add_edge_internal(u, v, c);
    }
    void add_edge(tuple<int,int> uR, tuple<int,int> vR, ll c = 0) {
        int u = h.hash(uR), v = h.hash(vR);
        add_edge_internal(u, v, c);
    }
    void add_edge(tuple<int,int,int> uR, tuple<int,int,int> vR, ll c = 0) {
        int u = h.hash(uR), v = h.hash(vR);
        add_edge_internal(u, v, c);
    }

  private:
    void add_edge_internal(int u, int v, ll c) {
        // always add u->v
        adj[u].emplace_back(v, c);
        // if undirected, also add v->u
        if (!is_directed)
            adj[v].emplace_back(u, c);
    }
};

//==================== BFS ====================//
class BFS {
    vector<ll> min_dist_from_source;
    vector<bool> visited;
    Graph* g;

  public:
    BFS(Graph* g_) {
        g = g_;
        clear();
    }

    void clear() {
        min_dist_from_source.assign(g->N, -1);
        visited.assign(g->N, false);
    }

    // run from int source
    void run(int sourceR) {
        int source = g->h.hash(sourceR);
        run_internal(source);
    }
    // run from tuple<int,int> source
    void run(tuple<int,int> sourceR) {
        int source = g->h.hash(sourceR);
        run_internal(source);
    }
    // run from tuple<int,int,int> source
    void run(tuple<int,int,int> sourceR) {
        int source = g->h.hash(sourceR);
        run_internal(source);
    }

    // get min distance
    int min_dist(int targetR) {
        return min_dist_from_source[g->h.hash(targetR)];
    }
    int min_dist(tuple<int,int> targetR) {
        return min_dist_from_source[g->h.hash(targetR)];
    }
    int min_dist(tuple<int,int,int> targetR) {
        return min_dist_from_source[g->h.hash(targetR)];
    }

    // check reachability
    bool is_visited(int targetR) {
        return visited[g->h.hash(targetR)];
    }
    bool is_visited(tuple<int,int> targetR) {
        return visited[g->h.hash(targetR)];
    }
    bool is_visited(tuple<int,int,int> targetR) {
        return visited[g->h.hash(targetR)];
    }

  private:
    void run_internal(int source) {
        queue<int> q;
        visited[source] = true;
        min_dist_from_source[source] = 0;
        q.push(source);

        while (!q.empty()) {
            int u = q.front(); q.pop();
            for (auto& [v, w] : g->adj[u]) {
                if (!visited[v]) {
                    visited[v] = true;
                    min_dist_from_source[v] = min_dist_from_source[u] + 1;
                    q.push(v);
                }
            }
        }
    }
};

//==================== Dja (Dijkstra) ====================//
class Dja {
    vector<ll> dist;
    vector<bool> visited;
    Graph* g;

  public:
    Dja(Graph* g_) {
        g = g_;
        clear();
    }

    void clear() {
        dist.assign(g->N, LLONG_MAX);
        visited.assign(g->N, false);
    }

    void run(int sourceR) {
        run_internal(g->h.hash(sourceR));
    }
    void run(tuple<int,int> sourceR) {
        run_internal(g->h.hash(sourceR));
    }
    void run(tuple<int,int,int> sourceR) {
        run_internal(g->h.hash(sourceR));
    }

    ll min_dist(int targetR) {
        return dist[g->h.hash(targetR)];
    }
    ll min_dist(tuple<int,int> targetR) {
        return dist[g->h.hash(targetR)];
    }
    ll min_dist(tuple<int,int,int> targetR) {
        return dist[g->h.hash(targetR)];
    }

    bool is_visited(int targetR) {
        return visited[g->h.hash(targetR)];
    }
    bool is_visited(tuple<int,int> targetR) {
        return visited[g->h.hash(targetR)];
    }
    bool is_visited(tuple<int,int,int> targetR) {
        return visited[g->h.hash(targetR)];
    }

  private:
    void run_internal(int source) {
        using PII = pair<ll,int>;
        priority_queue<PII, vector<PII>, greater<PII>> pq;
        dist[source] = 0;
        pq.emplace(0, source);

        while (!pq.empty()) {
            auto [d, u] = pq.top(); pq.pop();
            if (visited[u]) continue;
            visited[u] = true;

            for (auto& [v, w] : g->adj[u]) {
                if (dist[v] > d + w) {
                    dist[v] = d + w;
                    pq.emplace(dist[v], v);
                }
            }
        }
    }
};



                                //######################### 2D grid with Dijkstra also ##########################

#include <bits/stdc++.h>
using namespace std;

//— Helper to convert 2D (i,j) into 1D [0..n*m-1]
inline int id(int i, int j, int m) {
    return i * m + j;
}

//— Graph with weighted edges
struct Graph {
    int N;
    vector<vector<pair<int,int>>> adj;
    Graph(int _N): N(_N), adj(_N) {}

    // add a directed edge u→v with weight w
    void add_edge(int u, int v, int w) {
        adj[u].emplace_back(v, w);
    }
    // for undirected: call add_edge(u,v,w) and add_edge(v,u,w)
};

//— Classic BFS (treats every edge as weight=1)
struct BFS {
    vector<int>  min_dist;
    vector<bool> visited;

    BFS(int N)
      : min_dist(N, -1),
        visited(N, false)
    {}

    void run(const Graph &g, int src) {
        queue<int> q;
        q.push(src);
        visited[src]  = true;
        min_dist[src] = 0;

        while (!q.empty()) {
            int u = q.front(); q.pop();
            for (auto [v, w] : g.adj[u]) {
                if (!visited[v]) {
                    visited[v]    = true;
                    min_dist[v]   = min_dist[u] + 1;
                    q.push(v);
                }
            }
        }
    }

    bool is_visited(int u) const {
        return visited[u];
    }

    int min_dist_to(int u) const {
        return min_dist[u];
    }
};

//— Dijkstra’s Algorithm for positive weights, renamed to DJA
struct DJA {
    vector<int>  min_dist;
    vector<bool> visited;

    DJA(int N)
      : min_dist(N, INT_MAX),
        visited(N, false)
    {}

    void run(const Graph &g, int src) {
        using pii = pair<int,int>;           
        priority_queue<pii, vector<pii>, greater<pii>> pq;

        min_dist[src] = 0;
        pq.emplace(0, src);

        while (!pq.empty()) {
            auto [d, u] = pq.top(); pq.pop();
            if (visited[u]) continue;
            visited[u] = true;

            for (auto [v, w] : g.adj[u]) {
                if (min_dist[v] > d + w) {
                    min_dist[v] = d + w;
                    pq.emplace(min_dist[v], v);
                }
            }
        }
    }

    bool is_visited(int u) const {
        return visited[u];
    }

    int min_dist_to(int u) const {
        return min_dist[u];
    }
};

//Use case
int main(){
  
  int n,m;
  cin>>n>>m;
  
  Graph g(n*m);
  
  vector<vector<char>>grid(n, vector<char>(m));
  
  pair<int,int>start,end;
  
  for(int i=0;i<n;i++){
    for(int j=0;j<m;j++){
      cin>>grid[i][j];
      if(grid[i][j]=='A'){
        start.first=i;
        start.second=j;
    }
    if(grid[i][j]=='B'){
      end.first=i;
      end.second=j;
    }
    
  }
  }

  //making edges
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]!='#'){
                    if(j+1<m && grid[i][j+1]!='#'){
                        g.add_edge(id(i,j,m), id(i,j+1,m), 1);
                        g.add_edge(id(i,j+1,m), id(i,j,m), 1);
                    }
                    if(i+1<n && grid[i+1][j]!='#'){
                        g.add_edge(id(i,j,m), id(i+1,j,m), 1);
                        g.add_edge(id(i+1,j,m), id(i,j,m), 1);
                    }
                }
            }
        }
        
        BFS bfs(n*m);
        bfs.run(g, id(start.first, start.second, m));
        
        if(bfs.is_visited(id(end.first, end.second, m)){
          cout<<bfs.min_dist_to(id(end.first, end.second, m));
        }else{
          cout<<-1;
        }
} 





                                                          //######################### 1D grid with Dijkstra also ##########################

typedef int ll;
#include <bits/stdc++.h>
using namespace std;

class Hash {
  private:
    map<tuple<int,int,int>,int> hash_table;
  public:
    Hash () {}
    int hash(int x) {
      return hash({x,0,0});
    }
    int hash(tuple<int,int> x) {
      return hash({get<0>(x),get<1>(x),0});
    }
    int hash(tuple<int,int,int> x) {
      auto it = hash_table.find(x);
      if (it != hash_table.end())
        return it->second;
      int new_hash = hash_table.size();
      hash_table[x] = new_hash;
      return new_hash;
    }
};

class Graph {
  public:
    int N;                                   // total max nodes
    Hash h;
    vector<vector<pair<int,ll>>> adj;

    Graph(int _N)
      : N(_N),
        adj(_N)
    {}

    // single directed edge u→v with weight c
    void add_edge(int uR, int vR, ll c = 0) {
      int u = h.hash(uR), v = h.hash(vR);
      adj[u].emplace_back(v, c);
    }

    void add_edge(tuple<int,int> uR,
                  tuple<int,int> vR,
                  ll c = 0)
    {
      int u = h.hash(uR), v = h.hash(vR);
      adj[u].emplace_back(v, c);
    }

    void add_edge(tuple<int,int,int> uR,
                  tuple<int,int,int> vR,
                  ll c = 0)
    {
      int u = h.hash(uR), v = h.hash(vR);
      adj[u].emplace_back(v, c);
    }
};

//— Classic BFS (treats every edge as weight=1)
struct BFS {
    vector<ll>   min_dist;
    vector<bool> visited;
    Graph       *g;

    BFS(Graph *g_)
      : g(g_)
    {
      min_dist.resize(g->N, -1);
      visited.resize(g->N, false);
    }

    void clear() {
      fill(min_dist.begin(), min_dist.end(), -1);
      fill(visited.begin(), visited.end(), false);
    }

    // run from an integer node
    void run(int srcR) {
      int src = g->h.hash(srcR);
      queue<int> q;
      clear();
      q.push(src);
      visited[src]   = true;
      min_dist[src]  = 0;

      while (!q.empty()) {
        int u = q.front(); q.pop();
        for (auto &[v, w] : g->adj[u]) {
          if (!visited[v]) {
            visited[v]   = true;
            min_dist[v]  = min_dist[u] + 1;
            q.push(v);
          }
        }
      }
    }

    // overloads if you stored as tuple
    void run(tuple<int,int>   src) { run(g->h.hash(src)); }
    void run(tuple<int,int,int> src){ run(g->h.hash(src)); }

    bool is_visited(int tgtR) {
      return visited[g->h.hash(tgtR)];
    }
    bool is_visited(tuple<int,int>   tgt){ return is_visited(g->h.hash(tgt)); }
    bool is_visited(tuple<int,int,int> tgt){ return is_visited(g->h.hash(tgt)); }

    ll min_dist_to(int tgtR) {
      return min_dist[g->h.hash(tgtR)];
    }
    ll min_dist_to(tuple<int,int>   tgt){ return min_dist[g->h.hash(tgt)]; }
    ll min_dist_to(tuple<int,int,int> tgt){ return min_dist[g->h.hash(tgt)]; }
};


//Use case
int main(){
  Graph g(1000);             // reserve space for up to 1000 distinct hashes

  // add a *directed* edge from 1→2
  g.add_edge(1, 2, /*weight=*/5);

  // add an undirected edge between 3 and 4
  g.add_edge(3, 4);
  g.add_edge(4, 3);

  // for tuple‐based nodes
  g.add_edge(make_tuple(1,2), make_tuple(2,3), 7);

  // BFS shortest paths
  BFS bfs(&g);
  bfs.run(1);                // from node “1”
  if (bfs.is_visited(2))
    cout << "dist(1→2) = " << bfs.min_dist_to(2) << "\n";
  return 0;
}

